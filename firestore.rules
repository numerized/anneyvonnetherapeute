rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Default rule - deny all access
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Purchases collection - allow writing from server-side only
    match /purchases/{purchaseId} {
      allow read: if request.auth != null;  // Only authenticated users can read
      allow write: if true;  // Allow writing from server-side (webhook)
    }
    
    // Newsletter collection - allow reading and adding new subscribers
    match /newsletter/{document} {
      allow read: if true;  // Allow anyone to read
      allow create: if 
        // Must have an email field
        request.resource.data.keys().hasAll(['email']) &&
        // Email must be a string
        request.resource.data.email is string &&
        // Basic email format validation
        request.resource.data.email.matches('^[^@]+@[^@]+\\.[^@]+$');
    }
    
    // Newsletter unsubscribed collection
    match /newsletter-unsubscribed/{document} {
      allow read: if false;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Users collection - allow users to read and write their own data and allow reading from server-side
    match /users/{userId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        // Allow reading partner's data
        resource.data.partnerId == request.auth.uid ||
        // Allow reading from server-side (webhook)
        true
      );
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && (
        request.auth.uid == userId ||
        // Allow updating when accepting invitation
        request.resource.data.partnerId == request.auth.uid ||
        // Allow updating partner's document when they accept invitation
        resource.data.partnerId == request.auth.uid
      );
    }

    // Invitations collection
    match /invitations/{invitationId} {
      allow read: if true; // Allow reading invitations for validation
      allow update: if request.auth != null && (
        // Allow updating invitation status when accepting
        request.resource.data.status == 'completed' ||
        // Allow updating when the user is the inviter
        resource.data.inviterId == request.auth.uid
      );
      allow create: if request.auth != null;
    }
  }
}